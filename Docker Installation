adding the user ubuntu to docker user group
	sudo usermod -aG docker ubuntu

Update the apt package index:
	sudo apt-get update

nstall packages to allow apt to use a repository over HTTPS:
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common


Add Dockerâ€™s official GPG key:

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

$ add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Update the apt package index.

	$ sudo apt-get update

Finally, install Docker:
sudo apt-get install -y docker-ce

Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it's running:

sudo systemctl status docker


Verify that Docker CE is installed correctly by running the hello-world image.

	$ sudo docker run hello-world


root@ip-172-31-18-33:~# sudo docker run hello-world
Unable to find image 'hello-world:latest' locally (will check it for locally)
latest: Pulling from library/hello-world (pulling from)
1b930d010525: Pull complete
Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.



=======================================================================

Docker commands
===============================================================================



docker ps -a -q / docker ps -aq

Remove one or more dockers at a time 
	docker rm $(docker ps -a -q)

docker pull <image name> <ubuntu:14.04>

entering into the running container 
	docker exec -it 4fb7668e968a /bin/bash


docker rm -f $(docker ps -a -q)
  417  docker run -d -v /var/tmp/contdata:/usr/local/tomcat --name c1 gol:1.1
  418  docker ps -a
  419  docker exec -it c1 /bin/bash
  420  docker run -it -v /var/tmp/contdata:/usr/local/tomcat --name c3 gol:1.1 /bin/bash
  421  cd /var/tmp/contdata/
  422  ls -ltr
  423  touch test2.txt
  424  ls -ltr
  425  docker exec -it c1 /bin/bash
  426  docker exec -it c3 /bin/bash
  427  docker run -it -v /var/tmp/contdata:/usr/local/tomcat --name c4 gol:1.1 /bin/bash
  428  ls -ltr
  429  docker exec -it c3 /bin/bash
  430  docker ps -a
  431  docker rm c1
  432  docker ps -a
  433  docker run -it -v /var/tmp/contdata:/usr/local/tomcat --name c1 gol:1.1 /bin/bash
  434  docker network ls
  
  ==========================================================================
  
  Creating the own network bridge
  	docker network create -d bridge --subnet 10.10.11.0/25 GolBridge
  
  Creating the two containers on the bridge
  
  Creating container GolCont1 on the network GolBridge
  	docker run -it --name GolCont1 --network GolBridge ubuntu:16.04 /bin/bash
  
  creating Container GolCont2 on the network GolBridge
  	docker run -it --name GolCont2 --network GolBridge ubuntu:16.04 /bin/bash
  as soon as creating container we need to update it 
  	apt-get update
  intall ping utility in the container
  	apt-get install iputils-ping
  entering into container 
  	docker exec -it GolCont1 /bin/bash
  list of availabale networks
  	docker network ls
  checking the bridge of the network
  	docker network <bridge name> inspect
	docker network GolBridge inspect
 
  
  
  
  
